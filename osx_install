#!/usr/bin/env zsh
#
# Warning:
#   Please read all the scripts located in `./scripts` before running.
#   Each script asks you for confirmation before it does anything, but
#   reading them beforehand will mean you understand what is about to happen.
# cat /etc/shells
source ./scripts/_utils.zsh

echo
echo -e "${PURPLE}Hey ${USER}, let's setup your mac...${NC}"

# Make sure the zsh profile file exists (needed for script process).
# For Catalina the default is zsh - start assuming that only zsh exists
# (even though the usual 'old' version of bash still currently exists.
# Apple have hinted that it may go away at some point....like USB-A,
# headphone sockets...etc etc
# Add error for non-catlina or zsh usage.
[ "${SHELL##/*/}" != "zsh" ] && print_error_exit 'You must be using zsh to use this script.'

FILE=~/.zshrc
if ! [ -f "$FILE" ]; then
  touch "${FILE}"
fi

function do_action() {
  ACTION=$1
  SCRIPT=$2
  echo
  echo -e "${GREEN}${ACTION}${NC}"
  select yn in "Yes" "No"; do
    case $yn in
    Yes)
      ./scripts/"${SCRIPT}"
      exit_status=$?
      if [ $exit_status -eq 1 ]; then
          exit 1
      fi
      break
      ;;
    No) break ;;
    *) echo "Must input number 1 (yes) or 2 (no) - you specified $1" ;;
    esac
  done
}

do_action "Install brew and cask?" "brew.zsh"
do_action "Install MAS?" "mas.zsh"
do_action "Install Node via nvm?" "node.zsh"
do_action "Install Python 3?" "python.zsh"
do_action "Configure Go?" "go.zsh"
do_action "Configure Minikube?" "minikube.zsh"
do_action "Configure Git?" "git.zsh"
do_action "Copy dotfiles and configs? - (this may overwrite existing files in your home directory)" "dotfiles.zsh"
do_action "Install zsh / prezto things?" "zsh.zsh"
do_action "Adjust general Mac OSX settings?" "mac.zsh"
do_action "Go through non-automated things?" "manual.zsh"

# Final output (script complete)
echo
echo -e "${YELLOW}- - - - - - EVERYTHING IS AWESOME! - - - - - -"
cat <<"EOF"

                _ _,---._
       ,-','       `-.___
      /-;'               `._
     /\/          ._   _,'o \
    ( /\       _,--'\,','"`. )
     |\      ,'o     \'    //\
     |      \        /   ,--'""`-.
     :       \_    _/ ,-'         `-._
      \        `--'  /                )
       `.  \`._    ,'     ________,','
         .--`     ,'  ,--` __\___,;'
          \`.,-- ,' ,`_)--'  /`.,'
           \( ;  | | )      (`-/
             `--'| |)       |-/
               | | |        | |
               | | |,.,-.   | |_
               | `./ /   )---`  )
              _|  /    ,',   ,-'
             ,'|_(    /-<._,' |--,
             |    `--'---.     \/ \
             |          / \    /\  \
           ,-^---._     |  \  /  \  \
        ,-'        \----'   \/    \--`.
       /            \              \   \

------------------------------------------------
+ + + G O O D  J O B  -   A L L  D O N E ! + + +
EOF
echo -e "${NC}"

# Also display a nice output of current apple system stats using archey
archey
